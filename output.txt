
// File: tsconfig.json
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "outDir": "dist",
    "rootDir": "src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
} 

// File: package.json
{
  "name": "@tfw.in/tools",
  "version": "1.0.0",
  "type": "module",
  "bin": {
    "tools": "./dist/index.js"
  },
  "files": [
    "dist",
    "README.md"
  ],
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "start": "bun dist/index.js",
    "dev": "tsc --watch",
    "prepublishOnly": "bun run build",
    "test": "bun test src/**/*.test.ts"
  },
  "dependencies": {
    "commander": "^11.1.0",
    "glob": "^10.3.10"
  },
  "description": "",
  "main": "index.js",
  "author": "Chakshu Gautam",
  "license": "ISC",
  "devDependencies": {
    "bun-types": "latest",
    "typescript": "^5.0.0"
  },
  "peerDependencies": {
    "typescript": "^5.0.0"
  }
}

// File: README.md
# tools

CLI utilities for common development tasks.

## Installation

```bash
# Run directly with npx
npx @chakshu/tools <command>

# Or install globally
npm install -g @chakshu/tools
```

## Usage

### Package Files
Concatenate files into a single output file:

```bash
tools pkg --source ./src --dest output.txt
```

Options:
- `--source`: Source directory (default: current directory)
- `--dest`: Output file path
- `--verbose`: Show detailed output
- `--output`: Output format (text/json)

### Ignore Patterns
Uses `.notebooklmignore` or `.gitignore` for excluding files. Default ignores:
- node_modules
- .git
- build/dist directories
- Log files
- Lock files

## License
ISC


// File: bunfig.toml
name = "tools"
entry = "src/index.js"

[install]
production = false

[install.scopes]
tools = "https://registry.npmjs.org/"

// File: jsconfig.json
{
  "compilerOptions": {
    "module": "ES2022",
    "target": "ES2022",
    "moduleResolution": "node",
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}


// File: src/index.ts
#!/usr/bin/env bun
import { Command } from 'commander';
import { readdirSync } from 'node:fs';
import { join } from 'node:path';
import { fileURLToPath } from 'url';

class CLI extends Command {
    constructor() {
        super();
        this.name('tools')
            .description('CLI tools for local development workflow')
            .version('1.0.0');

        this.loadCommands().catch(error => {
            console.error('Failed to load commands:', error);
            process.exit(1);
        });
    }

    private async loadCommands(): Promise<void> {
        const __dirname = fileURLToPath(new URL('.', import.meta.url));
        const commandsDir = join(__dirname, 'commands');

        const commands = readdirSync(commandsDir, { withFileTypes: true })
            .filter(dirent => dirent.isDirectory())
            .map(dirent => dirent.name);

        for (const cmd of commands) {
            try {
                const { default: command } = await import(`./commands/${cmd}/index.js`);
                this.addCommand(command);
            } catch (error) {
                console.warn(`Failed to load command ${cmd}:`, error instanceof Error ? error.message : String(error));
            }
        }

        this.parse();
    }
}

new CLI(); 

// File: src/types.ts
export interface ProcessResult {
    totalFiles: number;
    successful: string[];
    failed: Array<{
        file: string;
        error: string;
    }>;
    staticFiles: Array<{
        original: string;
        copied: string;
    }>;
    output: string;
}

export interface CommandOptions {
    dest: string;
    source: string;
    verbose: boolean;
    output: 'text' | 'json';
} 

// File: src/commands/BaseCommand.ts
import { Command } from 'commander';

export abstract class BaseCommand extends Command {
    constructor(name: string) {
        super(name);
        this.option('-v, --verbose', 'show detailed execution information', false)
            .option('-o, --output <type>', 'output format (text/json)', 'text');
    }

    protected displayJsonOutput(data: unknown): void {
        process.stdout.write(JSON.stringify(data));
    }

    protected displayError(error: Error | unknown): void {
        console.error('Error:', error instanceof Error ? error.message : String(error));
        process.exit(1);
    }

    protected verboseLog(message: string): void {
        if (this.opts().verbose) {
            console.log(message);
        }
    }

    // Force implementing classes to define these methods
    abstract execute(options: unknown): Promise<void>;
    abstract displayResults(result: unknown, options: unknown): void;
} 

// File: src/commands/pkg/index.ts
import { resolve } from 'node:path';
import { Command } from 'commander';
import { concatFiles } from './concatFiles.js';
import type { CommandOptions, ProcessResult } from '../../types.js';

class PkgCommand extends Command {
    constructor() {
        super('pkg');
        this
            .description('Concatenate files while respecting ignore patterns')
            .option('-d, --dest <path>', 'destination path for output', 'notebooklm')
            .option('-s, --source <path>', 'source directory to process', process.cwd())
            .option('-v, --verbose', 'show detailed execution information', false)
            .option('-o, --output <type>', 'output format (text/json)', 'text')
            .action(async (options: CommandOptions) => {
                try {
                    const sourcePath = resolve(options.source);
                    const destPath = resolve(options.dest);

                    const result = await concatFiles(destPath, sourcePath, options.verbose);

                    if (options.verbose) {
                        this.displayVerboseOutput(result);
                    }

                    if (options.output === 'json') {
                        process.stdout.write(JSON.stringify(result));
                    } else {
                        console.log(`Files concatenated successfully from ${sourcePath} to ${destPath}`);
                        if (result.staticFiles.length > 0) {
                            console.log(`${result.staticFiles.length} static files copied to static/ directory`);
                        }
                    }
                } catch (error) {
                    console.error('Error:', error instanceof Error ? error.message : String(error));
                    process.exit(1);
                }
            });
    }

    private displayVerboseOutput(result: ProcessResult): void {
        console.log('\nExecution Summary:');
        console.log('----------------');
        console.log(`Total files processed: ${result.totalFiles}`);
        console.log(`Successfully processed: ${result.successful.length}`);
        console.log(`Failed to process: ${result.failed.length}`);
        console.log(`Static files copied: ${result.staticFiles.length}`);

        if (result.staticFiles.length > 0) {
            console.log('\nStatic files:');
            result.staticFiles.forEach(({ original, copied }) => {
                console.log(`- ${original} â†’ ${copied}`);
            });
        }

        if (result.failed.length > 0) {
            console.log('\nFailed files:');
            result.failed.forEach(({ file, error }) => {
                console.error(`- ${file}: ${error}`);
            });
        }
    }
}

export default new PkgCommand(); 

// File: src/commands/pkg/concatFiles.ts
import { readFile, writeFile, mkdir, readdir } from 'node:fs/promises';
import { join, dirname, relative } from 'node:path';
import { glob } from 'glob';
import type { ProcessResult } from '../../types.js';

const BLACKLIST = [
    'bun.toml',
    'bun.lockb',
    'package-lock.json',
    'yarn.lock',
    'pnpm-lock.yaml'
] as const;

const STATIC_FILE_TYPES = [
    '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.ico', '.svg',  // Images
    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', // Documents
    '.mp3', '.mp4', '.wav', '.avi', '.mov', // Media
    '.zip', '.rar', '.7z', '.tar', '.gz'    // Archives
] as const;

const isStaticFile = (filepath: string): boolean => {
    const ext = filepath.substring(filepath.lastIndexOf('.')).toLowerCase();
    return STATIC_FILE_TYPES.includes(ext as typeof STATIC_FILE_TYPES[number]);
};

const createStaticFilename = (filepath: string): string => {
    return filepath.replace(/[\/\\]/g, '_').replace(/^_+|_+$/g, '');
};

async function getIgnorePatterns(sourcePath: string): Promise<string[]> {
    const defaultPatterns = [
        '**/node_modules/**',
        '**/.git/**',
        '**/*.log',
        '**/*.lock',
        '**/dist/**',
        '**/build/**',
        ...BLACKLIST.map(file => `**/${file}`)
    ];

    try {
        const ignoreFile = await readFile(join(sourcePath, '.notebooklmignore'), 'utf-8')
            .catch(() => readFile(join(sourcePath, '.gitignore'), 'utf-8'));
        
        const patterns = ignoreFile
            .split('\n')
            .map(line => line.trim())
            .filter(line => line && !line.startsWith('#'))
            .map(pattern => {
                // Always ensure pattern starts with **/ for consistent matching
                pattern = pattern.startsWith('**/') ? pattern : `**/${pattern}`;
                // Ensure directory patterns end with /**
                if (pattern.endsWith('/')) {
                    pattern = `${pattern}**`;
                }
                return pattern;
            });

        return [...defaultPatterns, ...patterns];
    } catch {
        return defaultPatterns;
    }
}

export async function concatFiles(
    destPath: string,
    sourcePath: string = process.cwd(),
    verbose: boolean = false
): Promise<ProcessResult> {
    const result: ProcessResult = {
        totalFiles: 0,
        successful: [],
        failed: [],
        staticFiles: [],
        output: destPath
    };

    try {
        const ignorePatterns = await getIgnorePatterns(sourcePath);
        // Add the output file to ignore patterns
        ignorePatterns.push(`**/${relative(sourcePath, destPath)}`);

        if (verbose) {
            console.log('Using ignore patterns:', ignorePatterns);
        }

        const files = await glob('**/*.*', {
            ignore: ignorePatterns,
            cwd: sourcePath,
            dot: false,
            nodir: true,
            absolute: false,
            matchBase: true,
            follow: false
        });

        result.totalFiles = files.length;
        let concatenatedContent = '';

        const staticDir = join(dirname(destPath), 'static');
        await mkdir(staticDir, { recursive: true });

        for (const relativePath of files) {
            try {
                const fullPath = join(sourcePath, relativePath);

                if (isStaticFile(relativePath)) {
                    const staticFileName = createStaticFilename(relativePath);
                    const staticFilePath = join(staticDir, staticFileName);
                    await copyFile(fullPath, staticFilePath);
                    result.staticFiles.push({
                        original: relativePath,
                        copied: `static/${staticFileName}`
                    });
                    concatenatedContent += `\n// Static File: ${relativePath}\n// Copied to: static/${staticFileName}\n\n`;
                } else {
                    const content = await readFile(fullPath, 'utf-8');
                    concatenatedContent += `\n// File: ${relativePath}\n${content}\n`;
                }

                result.successful.push(relativePath);
                if (verbose) {
                    console.log(`Processed: ${relativePath}`);
                }
            } catch (error) {
                result.failed.push({
                    file: relativePath,
                    error: error instanceof Error ? error.message : String(error)
                });
                if (verbose) {
                    console.warn(`Failed to process ${relativePath}: ${error instanceof Error ? error.message : String(error)}`);
                }
            }
        }

        await writeFile(destPath, concatenatedContent);
        return result;
    } catch (error) {
        if (verbose) {
            console.error('Error:', error);
        }
        throw error;
    }
}

async function copyFile(source: string, dest: string): Promise<void> {
    const content = await readFile(source);
    await writeFile(dest, content);
} 

// File: src/commands/pkg/__tests__/pkg.test.ts
import { describe, test, expect, beforeEach, afterEach } from "bun:test";
import { mkdir, writeFile, rm, readFile } from 'node:fs/promises';
import { join, dirname } from 'node:path';
import { readdir, createTestFiles } from './helpers';
import PkgCommand from '../index';

const TEST_DIR = join(process.cwd(), 'src/commands/pkg/__tests__/test-repo');
const OUTPUT_FILE = 'output.txt';

describe('pkg command', () => {
    beforeEach(async () => {
        await rm(TEST_DIR, { recursive: true, force: true });
        await rm(OUTPUT_FILE, { force: true });
        await rm('static', { recursive: true, force: true });
        await mkdir(TEST_DIR, { recursive: true });
    });

    afterEach(async () => {
        await rm(TEST_DIR, { recursive: true, force: true });
        await rm(OUTPUT_FILE, { force: true });
        await rm('static', { recursive: true, force: true });
    });

    test('should concatenate text files and handle static files', async () => {
        const files = {
            'src/index.js': 'console.log("Hello World");',
            'src/utils/helper.js': 'export const add = (a, b) => a + b;',
            'assets/image.png': Buffer.from([0x89, 0x50, 0x4E, 0x47]),
            'docs/document.pdf': Buffer.from([0x25, 0x50, 0x44, 0x46])
        };

        await createTestFiles(TEST_DIR, files);

        await PkgCommand.parseAsync(['node', 'pkg', 
            '--source', TEST_DIR,
            '--dest', OUTPUT_FILE,
            '--verbose'
        ]);

        const output = await readFile(OUTPUT_FILE, 'utf-8');
        
        // Verify text files
        expect(output).toContain('// File: src/index.js');
        expect(output).toContain('console.log("Hello World")');
        expect(output).toContain('// File: src/utils/helper.js');
        
        // Verify static files
        const staticFiles = await readdir(join(process.cwd(), 'static'));
        expect(staticFiles).toContain('assets_image.png');
        expect(staticFiles).toContain('docs_document.pdf');
    });

    test('should respect ignore patterns', async () => {
        // Create ignore file first
        await writeFile(
            join(TEST_DIR, '.notebooklmignore'),
            `# Test files
*.test.js
# Ignored directory
src/ignored/**
# Temp files
temp.*`
        );

        const files = {
            // These should be included
            'src/index.js': 'valid file',
            'src/valid.js': 'should be kept',
            
            // These should be ignored
            'src/test.test.js': 'should be ignored',
            'src/ignored/file.js': 'should be ignored',
            'src/temp.js': 'should be ignored'
        };

        await createTestFiles(TEST_DIR, files);

        await PkgCommand.parseAsync(['node', 'pkg',
            '--source', TEST_DIR,
            '--dest', OUTPUT_FILE,
            '--verbose'
        ]);

        const output = await readFile(OUTPUT_FILE, 'utf-8');
        
        // Extract all processed file paths from the output
        const processedFiles = output.match(/\/\/ File: ([^\n]+)/g)
            ?.map(line => line.replace('// File: ', ''))
            ?? [];
        
        // Check included files
        expect(processedFiles).toContain('src/index.js');
        expect(processedFiles).toContain('src/valid.js');
        
        // Check excluded files
        expect(processedFiles).not.toContain('src/test.test.js');
        expect(processedFiles).not.toContain('src/ignored/file.js');
        expect(processedFiles).not.toContain('src/temp.js');
        
        // Verify exact file count
        expect(processedFiles.length).toBe(2);
    });

    test('should output JSON when specified', async () => {
        await createTestFiles(TEST_DIR, {
            'test.txt': 'test content'
        });

        const chunks: string[] = [];
        const originalWrite = process.stdout.write;
        process.stdout.write = (chunk) => {
            chunks.push(chunk.toString());
            return true;
        };

        try {
            await PkgCommand.parseAsync(['node', 'pkg',
                '--source', TEST_DIR,
                '--dest', OUTPUT_FILE,
                '--output', 'json'
            ]);

            const output = chunks.join('');
            const result = JSON.parse(output);
            
            expect(result).toHaveProperty('totalFiles');
            expect(result).toHaveProperty('successful');
            expect(result).toHaveProperty('staticFiles');
        } finally {
            process.stdout.write = originalWrite;
        }
    });
}); 

// File: src/commands/pkg/__tests__/helpers.ts
import { mkdir, writeFile, readdir as fsReaddir } from 'node:fs/promises';
import { join, dirname } from 'node:path';

export interface TestFile {
    path: string;
    content: string | Buffer;
}

export async function createTestFiles(baseDir: string, files: Record<string, string | Buffer>): Promise<void> {
    for (const [path, content] of Object.entries(files)) {
        const fullPath = join(baseDir, path);
        await mkdir(dirname(fullPath), { recursive: true });
        await writeFile(fullPath, content);
    }
}

export async function readdir(path: string): Promise<string[]> {
    return fsReaddir(path);
}

export const TEST_FILES = {
    TEXT: [
        {
            path: 'src/index.js',
            content: 'console.log("Hello World");'
        },
        {
            path: 'src/utils/helper.js',
            content: 'export const add = (a, b) => a + b;'
        },
        {
            path: 'package.json',
            content: '{"name": "test-repo"}'
        }
    ],
    STATIC: [
        {
            path: 'assets/image.png',
            content: Buffer.from([0x89, 0x50, 0x4E, 0x47])
        },
        {
            path: 'docs/document.pdf',
            content: Buffer.from([0x25, 0x50, 0x44, 0x46])
        }
    ],
    IGNORED: [
        {
            path: 'src/ignored/ignored-file.js',
            content: 'console.log("Should not be included");'
        },
        {
            path: 'src/component.test.js',
            content: 'test("should work", () => {});'
        }
    ]
}; 
